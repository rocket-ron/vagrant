# -*- mode: ruby -*-
# vi: set ft=ruby :

$spark_script_centos = <<SCRIPT
curl https://bintray.com/sbt/rpm/rpm | sudo tee /etc/yum.repos.d/bintray-sbt-rpm.repo
yum install -y java-1.8.0-openjdk-headless sbt
echo export JAVA_HOME=\"$(readlink -f $(which java) | grep -oP '.*(?=/bin)')\" >> /root/.bash_profile
curl http://d3kbcqa49mib13.cloudfront.net/spark-1.5.0-bin-hadoop2.6.tgz | tar -zx -C /usr/local --show-transformed --transform='s,/*[^/]*,spark,'
echo export SPARK_HOME=\"/usr/local/spark\" >> /root/.bash_profile
SCRIPT

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.


  sl_user_data_file = File.join(File.dirname(File.expand_path(__FILE__)), '.softlayer')
  sl_user_data = JSON.parse(File.open(sl_user_data_file).read, :symbolize_names => true)

  config.vm.provision :shell, :path => File.expand_path('scripts/sparkbuildprep.sh')
  config.vm.provision :shell, :path => File.expand_path('scripts/download.sh')


  (1..1).each do |i|

    config.vm.define "spark-#{i}" do |spark|
      spark.vm.provider :softlayer do |sl, override|
        override.vm.box		    = 'softlayer'
        override.ssh.username	= 'root'
        override.ssh.private_key_path    = [ File.expand_path("~/.ssh/id_rsa")]

        override.nfs.functional = false

        #sl.api_key                   = ENV["SL_API_KEY"]
        #sl.api_timeout               = 60
        #sl.datacenter                = "sjc03"
        #sl.dedicated                 = false
        sl.disk_capacity             = { 0 => 100 } # { disk_num => capacity_gb }, disk 1 reserved for swap by SoftLayer dont use
        sl.domain                    = 'rlcw251.net'
        #sl.endpoint_url              = SoftLayer::API_PUBLIC_ENDPOINT
        #sl.force_private_ip          = false
        sl.hostname                  = "spark-#{i}"
        sl.hourly_billing            = true
        #sl.image_guid                = "AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE" #Dont use this with sl.operating_system/sl.disk_capacity, they are mutually exclusive
        #sl.local_disk                = false
        #sl.manage_dns                = false
        sl.max_memory                = 4096
        #sl.network_speed             = 10
        sl.operating_system          = "UBUNTU_LATEST_64" 
        #sl.post_install              = nil #URL for post install script
        #sl.private_only              = false
        #sl.provision_timeout         = 1200
        #sl.rebuild_timeout           = 1200
        #sl.ssh_key                   = "rcordell"
        sl.start_cpus                = 2
        #sl.transaction_wait          = true
        #sl.user_data                 = nil
        #sl.username                  = ENV["SL_API_USERNAME"] || ENV['USER'] || ENV['USERNAME']   
        #sl.vlan_private              = nil #Automatically generated, override to vlan number string otherwise, see contrib/vagrant-softlayer-vlans tool for list of acceptable vlan values
        #sl.vlan_public               = nil #Automatically generated, override to vlan number string otherwise

        #Join a load balancer, see https://github.com/audiolize/vagrant-softlayer/wiki/Join-load-balancers for more options
        #sl.join_load_balancer vip: "1.1.1.1", port: 443, method: "Round Robin", type: "TCP" do |service|
          #service.destination_port = 443
          #service.health_check = "Ping"
          #service.weight = 2
        #end

        sl_user_data.each do |k,v|
          sl.send("#{k}=", v)
        end
      end #softlayer

      config.vm.provider :azure do |azure, override|
        override.vm.box = "azure"
        azure.mgmt_certificate = '/Users/rcordell/Documents/MIDS/W205/MIDS-W205/project/vagrant/azure/ronmckea01.pem'
        azure.mgmt_endpoint = 'https://management.core.windows.net'
        azure.subscription_id = '651f1b6f-d652-4c9f-b1ba-3533acc3204a'
        azure.storage_acct_name = 'mckrhcea01storage01' # optional. A new one will be generated if not provided.

      #      azure.vm_image = '0b11de9248dd4d87b18621318e037d37__RightImage-CentOS-6.5-x64-v14.1.5.1'
        azure.vm_image = '5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-65-20150605'
      #      azure.vm_image = 'b39f27a8b8c64d52b05eac6a62ebad85__Ubuntu-14_10-amd64-server-20150612-en-us-30GB'
        azure.vm_user = 'rcordell'
        azure.ssh_private_key_file = File.expand_path('~/.ssh/id_rsa')  # This is my private SSH key
        azure.ssh_certificate_file = File.expand_path('~/.ssh/ssh-cert.pem')  # This is the X509 certificate file generated from my private SSH key

        azure.vm_name = 'rlcw251-spark#{1}' # max 15 characters. contains letters, number and hyphens. can start with letters and can end with letters and numbers
        azure.cloud_service_name = 'rlcw251-spark#{1}' # same as vm_name. leave blank to auto-generate
        azure.deployment_name = 'rlcw251-spark#{1}' # defaults to cloud_service_name
        azure.vm_location = 'West US' # e.g., West US

        # Provide the following values if creating a *Nix VM
        azure.ssh_port = '22'
        config.ssh.pty = true  # corrects for the sudo requiring a tty on Centos distros
  #      config.vm.provision :shell, :path => "../puppet/bootstrap/centos_6_x.sh"
      end #azure


      #cci.vm.provision :file do |fileupload|
      #  fileupload.source      = "/tmp/local_example.txt"
      #  fileupload.destination = "/tmp/uploaded_vm_example.txt"
      #end

      #cci.vm.provision :shell do |shellscript|
        #Use the id to override it somewhere else, and preserve_order ensures it gets executed at the point
        #where it was originally defined instead of where it was overriden.
      #  shellscript.inline = "/bin/echo -n 'hello_world' > /dev/null", id: "helloworld", preserve_order: true
      #end
    end	#spark1
  end #loop

=begin
  config.vm.define :spark2 do |spark2|
    spark2.vm.provider :softlayer do |sl, override|
      override.vm.box       = 'softlayer'
      override.ssh.username = 'root'
      override.ssh.private_key_path    = [ File.expand_path("~/.ssh/id_rsa")]

      override.nfs.functional = false

      #sl.api_key                   = ENV["SL_API_KEY"]
      #sl.api_timeout               = 60
      #sl.datacenter                = "lon02"
      #sl.dedicated                 = false
      sl.disk_capacity             = { 0 => 100 } # { disk_num => capacity_gb }, disk 1 reserved for swap by SoftLayer dont use
      sl.domain                    = 'rlcw251.net'
      #sl.endpoint_url              = SoftLayer::API_PUBLIC_ENDPOINT
      #sl.force_private_ip          = false
      sl.hostname                  = 'spark2'
      sl.hourly_billing            = true
      #sl.image_guid                = "AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE" #Dont use this with sl.operating_system/sl.disk_capacity, they are mutually exclusive
      #sl.local_disk                = false
      #sl.manage_dns                = false
      sl.max_memory                = 4096
      #sl.network_speed             = 10
      sl.operating_system          = "UBUNTU_LATEST_64" 
      #sl.post_install              = nil #URL for post install script
      #sl.private_only              = false
      #sl.provision_timeout         = 1200
      #sl.rebuild_timeout           = 1200
      #sl.ssh_key                   = "rcordell"
      sl.start_cpus                = 2
      #sl.transaction_wait          = true
      #sl.user_data                 = nil
      #sl.username                  = ENV["SL_API_USERNAME"] || ENV['USER'] || ENV['USERNAME']   
      #sl.vlan_private              = nil #Automatically generated, override to vlan number string otherwise, see contrib/vagrant-softlayer-vlans tool for list of acceptable vlan values
      #sl.vlan_public               = nil #Automatically generated, override to vlan number string otherwise

      #Join a load balancer, see https://github.com/audiolize/vagrant-softlayer/wiki/Join-load-balancers for more options
      #sl.join_load_balancer vip: "1.1.1.1", port: 443, method: "Round Robin", type: "TCP" do |service|
        #service.destination_port = 443
        #service.health_check = "Ping"
        #service.weight = 2
      #end

      sl_user_data.each do |k,v|
        sl.send("#{k}=", v)
      end
    end #softlayer

    config.vm.provider :azure do |azure, override|
      override.vm.box = "azure"
      azure.mgmt_certificate = '/Users/rcordell/Documents/MIDS/W205/MIDS-W205/project/vagrant/azure/ronmckea01.pem'
      azure.mgmt_endpoint = 'https://management.core.windows.net'
      azure.subscription_id = '651f1b6f-d652-4c9f-b1ba-3533acc3204a'
      azure.storage_acct_name = 'mckrhcea01storage01' # optional. A new one will be generated if not provided.

    #      azure.vm_image = '0b11de9248dd4d87b18621318e037d37__RightImage-CentOS-6.5-x64-v14.1.5.1'
      azure.vm_image = '5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-65-20150605'
    #      azure.vm_image = 'b39f27a8b8c64d52b05eac6a62ebad85__Ubuntu-14_10-amd64-server-20150612-en-us-30GB'
      azure.vm_user = 'rcordell'
      azure.ssh_private_key_file = File.expand_path('~/.ssh/id_rsa')  # This is my private SSH key
      azure.ssh_certificate_file = File.expand_path('~/.ssh/ssh-cert.pem')  # This is the X509 certificate file generated from my private SSH key

      azure.vm_name = 'mckrhcea01-mgo2' # max 15 characters. contains letters, number and hyphens. can start with letters and can end with letters and numbers
      azure.cloud_service_name = 'mckrhcea01-mgo2' # same as vm_name. leave blank to auto-generate
      azure.deployment_name = 'mckrhcea01-mgo2' # defaults to cloud_service_name
      azure.vm_location = 'West US' # e.g., West US

      # Provide the following values if creating a *Nix VM
      azure.ssh_port = '22'
      config.ssh.pty = true  # corrects for the sudo requiring a tty on Centos distros
#      config.vm.provision :shell, :path => "../puppet/bootstrap/centos_6_x.sh"
    end #azure

    #cci.vm.provision :file do |fileupload|
    #  fileupload.source      = "/tmp/local_example.txt"
    #  fileupload.destination = "/tmp/uploaded_vm_example.txt"
    #end

    #cci.vm.provision :shell do |shellscript|
      #Use the id to override it somewhere else, and preserve_order ensures it gets executed at the point
      #where it was originally defined instead of where it was overriden.
    #  shellscript.inline = "/bin/echo -n 'hello_world' > /dev/null", id: "helloworld", preserve_order: true
    #end
  end #spark2

  config.vm.define :spark3 do |spark3|
    spark3.vm.provider :softlayer do |sl, override|
      override.vm.box       = 'softlayer'
      override.ssh.username = 'root'
      override.ssh.private_key_path    = [ File.expand_path("~/.ssh/id_rsa")]

      override.nfs.functional = false

      #sl.api_key                   = ENV["SL_API_KEY"]
      #sl.api_timeout               = 60
      #sl.datacenter                = "sjc03"
      #sl.dedicated                 = false
      sl.disk_capacity             = { 0 => 100 } # { disk_num => capacity_gb }, disk 1 reserved for swap by SoftLayer dont use
      sl.domain                    = 'rlcw251.net'
      #sl.endpoint_url              = SoftLayer::API_PUBLIC_ENDPOINT
      #sl.force_private_ip          = false
      sl.hostname                  = 'spark3'
      sl.hourly_billing            = true
      #sl.image_guid                = "AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE" #Dont use this with sl.operating_system/sl.disk_capacity, they are mutually exclusive
      #sl.local_disk                = false
      #sl.manage_dns                = false
      sl.max_memory                = 4096
      #sl.network_speed             = 10
      sl.operating_system          = "UBUNTU_LATEST_64" 
      #sl.post_install              = nil #URL for post install script
      #sl.private_only              = false
      #sl.provision_timeout         = 1200
      #sl.rebuild_timeout           = 1200
      #sl.ssh_key                   = "rcordell"
      sl.start_cpus                = 2
      #sl.transaction_wait          = true
      #sl.user_data                 = nil
      #sl.username                  = ENV["SL_API_USERNAME"] || ENV['USER'] || ENV['USERNAME']   
      #sl.vlan_private              = nil #Automatically generated, override to vlan number string otherwise, see contrib/vagrant-softlayer-vlans tool for list of acceptable vlan values
      #sl.vlan_public               = nil #Automatically generated, override to vlan number string otherwise

      #Join a load balancer, see https://github.com/audiolize/vagrant-softlayer/wiki/Join-load-balancers for more options
      #sl.join_load_balancer vip: "1.1.1.1", port: 443, method: "Round Robin", type: "TCP" do |service|
        #service.destination_port = 443
        #service.health_check = "Ping"
        #service.weight = 2
      #end

      sl_user_data.each do |k,v|
        sl.send("#{k}=", v)
      end
    end #softlayer

    config.vm.provider :azure do |azure, override|
      override.vm.box = "azure"
      azure.mgmt_certificate = '/Users/rcordell/Documents/MIDS/W205/MIDS-W205/project/vagrant/azure/ronmckea01.pem'
      azure.mgmt_endpoint = 'https://management.core.windows.net'
      azure.subscription_id = '651f1b6f-d652-4c9f-b1ba-3533acc3204a'
      azure.storage_acct_name = 'mckrhcea01storage01' # optional. A new one will be generated if not provided.

    #      azure.vm_image = '0b11de9248dd4d87b18621318e037d37__RightImage-CentOS-6.5-x64-v14.1.5.1'
      azure.vm_image = '5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-65-20150605'
    #      azure.vm_image = 'b39f27a8b8c64d52b05eac6a62ebad85__Ubuntu-14_10-amd64-server-20150612-en-us-30GB'
      azure.vm_user = 'rcordell'
      azure.ssh_private_key_file = File.expand_path('~/.ssh/id_rsa')  # This is my private SSH key
      azure.ssh_certificate_file = File.expand_path('~/.ssh/ssh-cert.pem')  # This is the X509 certificate file generated from my private SSH key

      azure.vm_name = 'mckrhcea01-mgo2' # max 15 characters. contains letters, number and hyphens. can start with letters and can end with letters and numbers
      azure.cloud_service_name = 'mckrhcea01-mgo2' # same as vm_name. leave blank to auto-generate
      azure.deployment_name = 'mckrhcea01-mgo2' # defaults to cloud_service_name
      azure.vm_location = 'West US' # e.g., West US

      # Provide the following values if creating a *Nix VM
      azure.ssh_port = '22'
      config.ssh.pty = true  # corrects for the sudo requiring a tty on Centos distros
#      config.vm.provision :shell, :path => "../puppet/bootstrap/centos_6_x.sh"
    end #azure

    #cci.vm.provision :file do |fileupload|
    #  fileupload.source      = "/tmp/local_example.txt"
    #  fileupload.destination = "/tmp/uploaded_vm_example.txt"
    #end

    #cci.vm.provision :shell do |shellscript|
      #Use the id to override it somewhere else, and preserve_order ensures it gets executed at the point
      #where it was originally defined instead of where it was overriden.
    #  shellscript.inline = "/bin/echo -n 'hello_world' > /dev/null", id: "helloworld", preserve_order: true
    #end
  end #spark3
=end

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
